<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="/jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2023-12-11T09:44:36+00:00</updated><id>/jekyll-theme-yat/feed.xml</id><title type="html">前端程序员——毛毛</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>maohuiling</name></author><entry><title type="html">TypeScript 高级类型</title><link href="/jekyll-theme-yat/ts/2023/12/11/TypeScript-%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html" rel="alternate" type="text/html" title="TypeScript 高级类型" /><published>2023-12-11T00:00:00+00:00</published><updated>2023-12-11T00:00:00+00:00</updated><id>/jekyll-theme-yat/ts/2023/12/11/TypeScript%20%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B</id><content type="html" xml:base="/jekyll-theme-yat/ts/2023/12/11/TypeScript-%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html"><![CDATA[<h1 id="typescript-高级类型">TypeScript 高级类型</h1>

<h2 id="泛型-基本介绍">泛型-基本介绍</h2>

<ul>
  <li><strong>泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用</strong>，常用于：函数、接口、class 中</li>
  <li>需求：创建一个 id 函数，传入什么数据就返回该数据本身(也就是说，参数和返回值类型相同)</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">id</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>比如，id(10) 调用以上函数就会直接返回 10 本身。但是，该函数只接收数值类型，无法用于其他类型</li>
  <li>为了能让函数能够接受任意类型，可以将参数类型修改为 any。但是，这样就失去了 TS 的类型保护，类型不安全</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">id</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="kr">any</span><span class="p">):</span> <span class="kr">any</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><strong>泛型在保证类型安全(不丢失类型信息)的同时，可以让函数等与多种不同的类型一起工作，灵活可复用</strong></li>
  <li>实际上，在 C# 和 Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一</li>
</ul>

<h2 id="泛型-泛型函数">泛型-泛型函数</h2>

<p>定义泛型函数</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">fn</span><span class="o">&lt;</span><span class="nx">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">Type</span><span class="p">):</span> <span class="nx">Type</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">fn</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>解释:
    <ol>
      <li>语法：在函数名称的后面添加 <code class="language-plaintext highlighter-rouge">&lt;&gt;</code>(尖括号)，<strong>尖括号中添加类型变量</strong>，比如此处的 Type</li>
      <li><strong>类型变量 Type，是一种特殊类型的变量，它处理类型而不是值</strong></li>
      <li><strong>该类型变量相当于一个类型容器</strong>，能够捕获用户提供的类型(具体是什么类型由用户调用该函数时指定)</li>
      <li>因为 Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型</li>
      <li>类型变量 Type，可以是任意合法的变量名称</li>
    </ol>
  </li>
</ul>

<p>调用泛型函数</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">fn</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">fn</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>
    <p>解释：</p>

    <ol>
      <li>语法：在函数名称的后面添加 <code class="language-plaintext highlighter-rouge">&lt;&gt;</code>(尖括号)，<strong>尖括号中指定具体的类型</strong>，比如，此处的 number</li>
      <li>当传入类型 number 后，这个类型就会被函数声明时指定的类型变量 Type 捕获到</li>
      <li>此时，Type 的类型就是 number，所以，函数 id 参数和返回值的类型也都是 number</li>
    </ol>
  </li>
  <li>同样，如果传入类型 string，函数 id 参数和返回值的类型就都是 string</li>
  <li>这样，通过泛型就做到了让 id 函数与多种不同的类型一起工作，<strong>实现了复用的同时保证了类型安全</strong></li>
</ul>

<h2 id="简化泛型函数调用">简化泛型函数调用</h2>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 省略 &lt;number&gt; 调用函数</span>
<span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="nf">fn</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="nf">fn</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>
    <p>解释:</p>

    <ol>
      <li>在调用泛型函数时，<strong>可以省略 <code class="language-plaintext highlighter-rouge">&lt;类型&gt;</code> 来简化泛型函数的调用</strong></li>
      <li>此时，TS 内部会采用一种叫做<strong>类型参数推断</strong>的机制，来根据传入的实参自动推断出类型变量 Type 的类型</li>
      <li>比如，传入实参 10，TS 会自动推断出变量 num 的类型 number，并作为 Type 的类型</li>
    </ol>
  </li>
  <li>推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读</li>
  <li>说明：<strong>当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数</strong></li>
</ul>

<h2 id="泛型约束">泛型约束</h2>

<ul>
  <li>默认情况下，泛型函数的类型变量 Type 可以代表多个类型，这导致无法访问任何属性</li>
  <li>比如，id(‘a’) 调用函数时获取参数的长度：</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">fn</span><span class="o">&lt;</span><span class="nx">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">Type</span><span class="p">):</span> <span class="nx">Type</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">fn</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>解释：Type 可以代表任意类型，无法保证一定存在 length 属性，比如 number 类型就没有 length</li>
  <li>此时，就需要<strong>为泛型添加约束来<code class="language-plaintext highlighter-rouge">收缩类型</code>(缩窄类型取值范围)</strong></li>
  <li>添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型 2 添加约束</li>
</ul>

<h3 id="指定更加具体的类型">指定更加具体的类型</h3>

<p>比如，将类型修改为 <code class="language-plaintext highlighter-rouge">Type[]</code>(Type 类型的数组)，因为只要是数组就一定存在 length 属性，因此就可以访问了</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">fn</span><span class="o">&lt;</span><span class="nx">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">Type</span><span class="p">[]):</span> <span class="nx">Type</span><span class="p">[]</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="添加约束">添加约束</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个接口</span>
<span class="kr">interface</span> <span class="nx">ILength</span> <span class="p">{</span>
  <span class="nl">length</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Type extends ILength 添加泛型约束</span>
<span class="c1">// 解释：表示传入的 类型 必须满足 ILength 接口的要求才行，也就是得有一个 number 类型的 length 属性</span>
<span class="kd">function</span> <span class="nf">id</span><span class="o">&lt;</span><span class="nx">Type</span> <span class="kd">extends</span> <span class="nx">ILength</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">Type</span><span class="p">):</span> <span class="nx">Type</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>解释:
    <ol>
      <li>创建描述约束的接口 ILength，该接口要求提供 length 属性</li>
      <li>通过 <code class="language-plaintext highlighter-rouge">extends</code> 关键字使用该接口，为泛型(类型变量)添加约束</li>
      <li>该约束表示：<strong>传入的类型必须具有 length 属性</strong></li>
    </ol>
  </li>
  <li>注意:传入的实参(比如，数组)只要有 length 属性即可（类型兼容性)</li>
</ul>

<h2 id="泛型-多个类型变量">泛型-多个类型变量</h2>

<p>泛型的类型变量可以有多个，并且<strong>类型变量之间还可以约束</strong>(比如，第二个类型变量受第一个类型变量约束)
比如，创建一个函数来获取对象中属性的值：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">getProp</span><span class="o">&lt;</span><span class="nx">Type</span><span class="p">,</span> <span class="nx">Key</span> <span class="kd">extends</span> <span class="kr">keyof</span> <span class="nx">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">obj</span><span class="p">:</span> <span class="nx">Type</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="nx">Key</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">};</span>
<span class="nf">getProp</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>解释:
    <ol>
      <li>添加了第二个类型变量 Key，两个类型变量之间使用 <code class="language-plaintext highlighter-rouge">,</code> 逗号分隔。</li>
      <li><strong>keyof 关键字接收一个对象类型，生成其键名称(可能是字符串或数字)的联合类型</strong>。</li>
      <li>本示例中 <code class="language-plaintext highlighter-rouge">keyof Type</code> 实际上获取的是 person 对象所有键的联合类型，也就是：<code class="language-plaintext highlighter-rouge">'name' | 'age'</code></li>
      <li>类型变量 Key 受 Type 约束，可以理解为：Key 只能是 Type 所有键中的任意一个，或者说只能访问对象中存在的属性</li>
    </ol>
  </li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Type extends object 表示： Type 应该是一个对象类型，如果不是 对象 类型，就会报错</span>
<span class="c1">// 如果要用到 对象 类型，应该用 object ，而不是 Object</span>
<span class="kd">function</span> <span class="nf">getProperty</span><span class="o">&lt;</span><span class="nx">Type</span> <span class="kd">extends</span> <span class="nx">object</span><span class="p">,</span> <span class="nx">Key</span> <span class="kd">extends</span> <span class="kr">keyof</span> <span class="nx">Type</span><span class="o">&gt;</span><span class="p">(</span>
  <span class="nx">obj</span><span class="p">:</span> <span class="nx">Type</span><span class="p">,</span>
  <span class="nx">key</span><span class="p">:</span> <span class="nx">Key</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="泛型接口">泛型接口</h2>

<p>泛型接口：接口也可以配合泛型来使用，以增加其灵活性，增强其复用性</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IdFunc</span><span class="o">&lt;</span><span class="nx">Type</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="p">(</span><span class="na">value</span><span class="p">:</span> <span class="nx">Type</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Type</span><span class="p">;</span>
  <span class="nl">ids</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Type</span><span class="p">[];</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">obj</span><span class="p">:</span> <span class="nx">IdFunc</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nf">id</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">},</span>
  <span class="nf">ids</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>解释:
    <ol>
      <li>在接口名称的后面添加 <code class="language-plaintext highlighter-rouge">&lt;类型变量&gt;</code>，那么，这个接口就变成了泛型接口。</li>
      <li>接口的类型变量，对接口中所有其他成员可见，也就是<strong>接口中所有成员都可以使用类型变量</strong>。</li>
      <li>使用泛型接口时，<strong>需要显式指定具体的类型</strong>(比如，此处的 IdFunc<nunber>)。</nunber></li>
      <li>此时，id 方法的参数和返回值类型都是 number;ids 方法的返回值类型是 number[]。</li>
    </ol>
  </li>
</ul>

<h3 id="数组-泛型接口">数组-泛型接口</h3>

<p>实际上，JS 中的数组在 TS 中就是一个泛型接口。</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">strs</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">];</span>
<span class="c1">// 鼠标放在 forEach 上查看类型</span>
<span class="nx">strs</span><span class="p">.</span><span class="nx">forEach</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
<span class="c1">// 鼠标放在 forEach 上查看类型</span>
<span class="nx">nums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>解释:当我们在使用数组时，TS 会根据数组的不同类型，来自动将类型变量设置为相应的类型</li>
  <li>技巧:可以通过 Ctrl + 鼠标左键(Mac：Command + 鼠标左键)来查看具体的类型信息</li>
</ul>

<h2 id="泛型工具类型">泛型工具类型</h2>

<ul>
  <li>泛型工具类型:TS 内置了一些常用的工具类型，来简化 TS 中的一些常见操作</li>
  <li>说明:它们都是基于泛型实现的(泛型适用于多种类型，更加通用)，并且是内置的，可以直接在代码中使用。 这些工具类型有很多，主要学习以下几个:</li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Partial&lt;Type&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">Readonly&lt;Type&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">Pick&lt;Type, Keys&gt;</code></li>
</ol>

<h3 id="partial">Partial</h3>

<ul>
  <li>Partial<Type> 用来构造(创建)一个类型，将 Type 的所有属性设置为可选。</Type></li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="kr">number</span><span class="p">[];</span>
<span class="p">};</span>

<span class="kd">type</span> <span class="nx">PartialProps</span> <span class="o">=</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>解释:构造出来的新类型 PartialProps 结构和 Props 相同，但所有属性都变为可选的。</li>
</ul>

<h3 id="readonly">Readonly</h3>

<ul>
  <li>Readonly<Type> 用来构造一个类型，将 Type 的所有属性都设置为 readonly(只读)。</Type></li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="kr">number</span><span class="p">[];</span>
<span class="p">};</span>

<span class="kd">type</span> <span class="nx">ReadonlyProps</span> <span class="o">=</span> <span class="nb">Readonly</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>解释:构造出来的新类型 ReadonlyProps 结构和 Props 相同，但所有属性都变为只读的。</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">props</span><span class="p">:</span> <span class="nx">ReadonlyProps</span> <span class="o">=</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,</span> <span class="na">children</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>
<span class="c1">// 错误演示</span>
<span class="nx">props</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>当我们想重新给 id 属性赋值时，就会报错:无法分配到 “id” ，因为它是只读属性。</li>
</ul>

<h3 id="pick">Pick</h3>

<ul>
  <li>Pick&lt;Type, Keys&gt; 从 Type 中选择一组属性来构造新类型。</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="kr">number</span><span class="p">[];</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">PickProps</span> <span class="o">=</span> <span class="nb">Pick</span><span class="o">&lt;</span><span class="nx">Props</span><span class="p">,</span> <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>解释:
    <ol>
      <li>Pick 工具类型有两个类型变量:1 表示选择谁的属性 2 表示选择哪几个属性。 2. 其中第二个类型变量，如果只选择一个则只传入该属性名即可。</li>
      <li>第二个类型变量传入的属性只能是第一个类型变量中存在的属性。</li>
      <li>构造出来的新类型 PickProps，只有 id 和 title 两个属性类型。</li>
    </ol>
  </li>
</ul>]]></content><author><name>maohuiling</name></author><category term="TS" /><summary type="html"><![CDATA[TypeScript 高级类型 泛型-基本介绍 泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用，常用于：函数、接口、class 中 需求：创建一个 id 函数，传入什么数据就返回该数据本身(也就是说，参数和返回值类型相同) function id(value: number): number { return value; } 比如，id(10) 调用以上函数就会直接返回 10 本身。但是，该函数只接收数值类型，无法用于其他类型 为了能让函数能够接受任意类型，可以将参数类型修改为 any。但是，这样就失去了 TS 的类型保护，类型不安全 function id(value: any): any { return value; } 泛型在保证类型安全(不丢失类型信息)的同时，可以让函数等与多种不同的类型一起工作，灵活可复用 实际上，在 C# 和 Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一 泛型-泛型函数 定义泛型函数 function fn&lt;Type&gt;(value: Type): Type { return value; } function fn&lt;T&gt;(value: T): T { return value; } 解释: 语法：在函数名称的后面添加 &lt;&gt;(尖括号)，尖括号中添加类型变量，比如此处的 Type 类型变量 Type，是一种特殊类型的变量，它处理类型而不是值 该类型变量相当于一个类型容器，能够捕获用户提供的类型(具体是什么类型由用户调用该函数时指定) 因为 Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型 类型变量 Type，可以是任意合法的变量名称 调用泛型函数 const num = fn&lt;number&gt;(10); const str = fn&lt;string&gt;("a"); 解释： 语法：在函数名称的后面添加 &lt;&gt;(尖括号)，尖括号中指定具体的类型，比如，此处的 number 当传入类型 number 后，这个类型就会被函数声明时指定的类型变量 Type 捕获到 此时，Type 的类型就是 number，所以，函数 id 参数和返回值的类型也都是 number 同样，如果传入类型 string，函数 id 参数和返回值的类型就都是 string 这样，通过泛型就做到了让 id 函数与多种不同的类型一起工作，实现了复用的同时保证了类型安全 简化泛型函数调用 // 省略 &lt;number&gt; 调用函数 let num = fn(10); let str = fn("a"); 解释: 在调用泛型函数时，可以省略 &lt;类型&gt; 来简化泛型函数的调用 此时，TS 内部会采用一种叫做类型参数推断的机制，来根据传入的实参自动推断出类型变量 Type 的类型 比如，传入实参 10，TS 会自动推断出变量 num 的类型 number，并作为 Type 的类型 推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读 说明：当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数 泛型约束 默认情况下，泛型函数的类型变量 Type 可以代表多个类型，这导致无法访问任何属性 比如，id(‘a’) 调用函数时获取参数的长度： function fn&lt;Type&gt;(value: Type): Type { console.log(value.length); return value; } fn("a"); 解释：Type 可以代表任意类型，无法保证一定存在 length 属性，比如 number 类型就没有 length 此时，就需要为泛型添加约束来收缩类型(缩窄类型取值范围) 添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型 2 添加约束 指定更加具体的类型 比如，将类型修改为 Type[](Type 类型的数组)，因为只要是数组就一定存在 length 属性，因此就可以访问了 function fn&lt;Type&gt;(value: Type[]): Type[] { console.log(value.length); return value; } 添加约束 // 创建一个接口 interface ILength { length: number; } // Type extends ILength 添加泛型约束 // 解释：表示传入的 类型 必须满足 ILength 接口的要求才行，也就是得有一个 number 类型的 length 属性 function id&lt;Type extends ILength&gt;(value: Type): Type { console.log(value.length); return value; } 解释: 创建描述约束的接口 ILength，该接口要求提供 length 属性 通过 extends 关键字使用该接口，为泛型(类型变量)添加约束 该约束表示：传入的类型必须具有 length 属性 注意:传入的实参(比如，数组)只要有 length 属性即可（类型兼容性) 泛型-多个类型变量 泛型的类型变量可以有多个，并且类型变量之间还可以约束(比如，第二个类型变量受第一个类型变量约束) 比如，创建一个函数来获取对象中属性的值： function getProp&lt;Type, Key extends keyof Type&gt;(obj: Type, key: Key) { return obj[key]; } let person = { name: "jack", age: 18 }; getProp(person, "name"); 解释: 添加了第二个类型变量 Key，两个类型变量之间使用 , 逗号分隔。 keyof 关键字接收一个对象类型，生成其键名称(可能是字符串或数字)的联合类型。 本示例中 keyof Type 实际上获取的是 person 对象所有键的联合类型，也就是：'name' | 'age' 类型变量 Key 受 Type 约束，可以理解为：Key 只能是 Type 所有键中的任意一个，或者说只能访问对象中存在的属性 // Type extends object 表示： Type 应该是一个对象类型，如果不是 对象 类型，就会报错 // 如果要用到 对象 类型，应该用 object ，而不是 Object function getProperty&lt;Type extends object, Key extends keyof Type&gt;( obj: Type, key: Key ) { return obj[key]; } 泛型接口 泛型接口：接口也可以配合泛型来使用，以增加其灵活性，增强其复用性 interface IdFunc&lt;Type&gt; { id: (value: Type) =&gt; Type; ids: () =&gt; Type[]; } let obj: IdFunc&lt;number&gt; = { id(value) { return value; }, ids() { return [1, 3, 5]; }, }; 解释: 在接口名称的后面添加 &lt;类型变量&gt;，那么，这个接口就变成了泛型接口。 接口的类型变量，对接口中所有其他成员可见，也就是接口中所有成员都可以使用类型变量。 使用泛型接口时，需要显式指定具体的类型(比如，此处的 IdFunc)。 此时，id 方法的参数和返回值类型都是 number;ids 方法的返回值类型是 number[]。 数组-泛型接口 实际上，JS 中的数组在 TS 中就是一个泛型接口。 const strs = ["a", "b", "c"]; // 鼠标放在 forEach 上查看类型 strs.forEach; const nums = [1, 3, 5]; // 鼠标放在 forEach 上查看类型 nums.forEach; 解释:当我们在使用数组时，TS 会根据数组的不同类型，来自动将类型变量设置为相应的类型 技巧:可以通过 Ctrl + 鼠标左键(Mac：Command + 鼠标左键)来查看具体的类型信息 泛型工具类型 泛型工具类型:TS 内置了一些常用的工具类型，来简化 TS 中的一些常见操作 说明:它们都是基于泛型实现的(泛型适用于多种类型，更加通用)，并且是内置的，可以直接在代码中使用。 这些工具类型有很多，主要学习以下几个: Partial&lt;Type&gt; Readonly&lt;Type&gt; Pick&lt;Type, Keys&gt; Partial Partial 用来构造(创建)一个类型，将 Type 的所有属性设置为可选。 type Props = { id: string; children: number[]; }; type PartialProps = Partial&lt;Props&gt;; 解释:构造出来的新类型 PartialProps 结构和 Props 相同，但所有属性都变为可选的。 Readonly Readonly 用来构造一个类型，将 Type 的所有属性都设置为 readonly(只读)。 type Props = { id: string; children: number[]; }; type ReadonlyProps = Readonly&lt;Props&gt;; 解释:构造出来的新类型 ReadonlyProps 结构和 Props 相同，但所有属性都变为只读的。 let props: ReadonlyProps = { id: "1", children: [] }; // 错误演示 props.id = "2"; 当我们想重新给 id 属性赋值时，就会报错:无法分配到 “id” ，因为它是只读属性。 Pick Pick&lt;Type, Keys&gt; 从 Type 中选择一组属性来构造新类型。 interface Props { id: string; title: string; children: number[]; } type PickProps = Pick&lt;Props, "id" | "title"&gt;; 解释: Pick 工具类型有两个类型变量:1 表示选择谁的属性 2 表示选择哪几个属性。 2. 其中第二个类型变量，如果只选择一个则只传入该属性名即可。 第二个类型变量传入的属性只能是第一个类型变量中存在的属性。 构造出来的新类型 PickProps，只有 id 和 title 两个属性类型。]]></summary></entry><entry><title type="html">An exhibit of Markdown</title><link href="/jekyll-theme-yat/markdown/2018/12/05/an-exhibit-of-markdown.html" rel="alternate" type="text/html" title="An exhibit of Markdown" /><published>2018-12-05T00:00:00+00:00</published><updated>2018-12-05T00:00:00+00:00</updated><id>/jekyll-theme-yat/markdown/2018/12/05/an-exhibit-of-markdown</id><content type="html" xml:base="/jekyll-theme-yat/markdown/2018/12/05/an-exhibit-of-markdown.html"><![CDATA[<p>This note demonstrates some of what <a href="https://daringfireball.net/projects/markdown/">Markdown</a> is capable of doing.</p>

<h2 id="an-exhibit-of-markdown">An exhibit of Markdown</h2>

<p><em>Note: Feel free to play with this page. Unlike regular notes, this doesn’t automatically save itself.</em></p>

<h2 id="basic-formatting">Basic formatting</h2>

<p>Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</p>

<p>Paragraphs must be separated by a blank line. Basic formatting of <em>italics</em> and <strong>bold</strong> is supported. This <em>can be <strong>nested</strong> like</em> so.</p>

<h2 id="lists">Lists</h2>

<h3 id="ordered-list">Ordered list</h3>

<ol>
  <li>Item 1</li>
  <li>A second item</li>
  <li>Number 3</li>
  <li>Ⅳ</li>
</ol>

<p><em>Note: the fourth item uses the Unicode character for <a href="https://www.fileformat.info/info/unicode/char/2163/index.htm">Roman numeral four</a>.</em></p>

<h3 id="unordered-list">Unordered list</h3>

<ul>
  <li>An item</li>
  <li>Another item</li>
  <li>Yet another item</li>
  <li>And there’s more…</li>
</ul>

<h2 id="paragraph-modifiers">Paragraph modifiers</h2>

<h3 id="code-block">Code block</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Code blocks are very useful for developers and other people who look at code or other things that are written in plain text. As you can see, it uses a fixed-width font.
</code></pre></div></div>

<p>You can also make <code class="language-plaintext highlighter-rouge">inline code</code> to add code into other things.</p>

<h3 id="quote">Quote</h3>

<blockquote>
  <p>Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.</p>
</blockquote>

<h2 id="headings">Headings</h2>

<p>There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character.</p>

<h3 id="headings-can-also-contain-formatting">Headings <em>can</em> also contain <strong>formatting</strong></h3>

<h3 id="they-can-even-contain-inline-code">They can even contain <code class="language-plaintext highlighter-rouge">inline code</code></h3>

<p>Of course, demonstrating what headings look like messes up the structure of the page.</p>

<p>I don’t recommend using more than three or four levels of headings here, because, when you’re smallest heading isn’t too small, and you’re largest heading isn’t too big, and you want each size up to look noticeably larger and more important, there there are only so many sizes that you can use.</p>

<h2 id="urls">URLs</h2>

<p>URLs can be made in a handful of ways:</p>

<ul>
  <li>A named link to <a href="https://www.markitdown.net/">MarkItDown</a>. The easiest way to do these is to select what you want to make a link and hit <code class="language-plaintext highlighter-rouge">Ctrl+L</code>.</li>
  <li>Another named link to <a href="https://www.markitdown.net/">MarkItDown</a></li>
  <li>Sometimes you just want a URL like <a href="https://www.markitdown.net/">https://www.markitdown.net/</a>.</li>
</ul>

<h2 id="horizontal-rule">Horizontal rule</h2>

<p>A horizontal rule is a line that goes across the middle of the page.</p>

<hr />

<p>It’s sometimes handy for breaking things up.</p>

<h2 id="images">Images</h2>

<p>Markdown can also contain images. I’ll need to add something here sometime.</p>

<h2 id="finally">Finally</h2>

<p>There’s actually a lot more to Markdown than this. See the official <a href="https://daringfireball.net/projects/markdown/basics">introduction</a> and <a href="https://daringfireball.net/projects/markdown/syntax">syntax</a> for more information. However, be aware that this is not using the official implementation, and this might work subtly differently in some of the little things.</p>]]></content><author><name>maohuiling</name></author><category term="markdown" /><category term="example" /><category term="markdown" /><summary type="html"><![CDATA[This note demonstrates some of what Markdown is capable of doing.]]></summary></entry><entry><title type="html">Mathjax Test</title><link href="/jekyll-theme-yat/markdown/2018/05/26/mathjax-test.html" rel="alternate" type="text/html" title="Mathjax Test" /><published>2018-05-26T00:00:00+00:00</published><updated>2018-05-26T00:00:00+00:00</updated><id>/jekyll-theme-yat/markdown/2018/05/26/mathjax-test</id><content type="html" xml:base="/jekyll-theme-yat/markdown/2018/05/26/mathjax-test.html"><![CDATA[<ul>
  <li>A safe integer is an integer that
    <ul>
      <li>can be exactly represented as an IEEE-754 double precision number, and</li>
      <li>whose IEEE-75 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation</li>
    </ul>
  </li>
  <li>For example, $ 2 ^ {53} - 1 $ is a safe integer,
    <ul>
      <li>it can be exactly represented</li>
    </ul>
  </li>
</ul>]]></content><author><name>maohuiling</name></author><category term="markdown" /><category term="test" /><summary type="html"><![CDATA[A safe integer is an integer that can be exactly represented as an IEEE-754 double precision number, and whose IEEE-75 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation For example, $ 2 ^ {53} - 1 $ is a safe integer, it can be exactly represented]]></summary></entry><entry><title type="html">Video example</title><link href="/jekyll-theme-yat/example/2017/12/18/video-example.html" rel="alternate" type="text/html" title="Video example" /><published>2017-12-18T00:00:00+00:00</published><updated>2017-12-18T00:00:00+00:00</updated><id>/jekyll-theme-yat/example/2017/12/18/video-example</id><content type="html" xml:base="/jekyll-theme-yat/example/2017/12/18/video-example.html"><![CDATA[<h2 id="canon-in-d-pachelbels-canon---cello--piano-best-wedding-version">Canon in D (Pachelbel’s Canon) - Cello &amp; Piano [BEST WEDDING VERSION]</h2>
<p>Some of you know that we occasionally play for weddings. As you can imagine, we get a LOT of requests for Canon in D, and we discovered that there were no good arrangements available anywhere for piano and cello! Hard to believe given its popularity. So we decided to make our own! We tried to stick as closely to the original as possible (which was written for three violins and basso continuo), and we performed it <em>not</em> at a snail’s pace so the bride can actually make it down the aisle without putting everyone to sleep. 🙊(Yeah, we said it! Nobody likes a slow processional!) Also, the number one complaint about this piece from cellists is always how booooring it is to play because they literally have to play the same 8 bass notes over and over for the entire piece. Problem solved with this arrangement because the cello never has to play the bass! 🙌(The piano does, but we get lots of other fun stuff too so it’s ok!) So for all you musicians out there playing weddings, we hope you enjoy playing this arrangement a little more than the ones you were used to…You can get it from www.musicnotes.com. 😊Be sure to let us know in the comments if you do!</p>

<p><img src="//www.youtube.com/watch?v=Ptk_1Dc2iPY" alt="" /></p>

<h2 id="gucci-hallucination--the-line-animation--gucci">GUCCI HALLUCINATION / THE LINE ANIMATION / GUCCI</h2>
<p>BACKGROUND /</p>

<p>Gucci share their creative vision through a series of surreal animated paintings by acclaimed artist Ignasi Monreal and The Line Animation studio. The animations make up part of a larger campaign shared via social media, above the line and print.</p>

<p>APPROACH /</p>

<p>Our aim was to ground and accentuate the outlandish scenarios with ambient sound design. Neither proclaiming to be positive or negative, the sound conveys a sense of the uncanny and leaves the audience with nothing but their own interpretations. their creative vision through a series of surreal animated paintings by acclaimed artist Ignasi Monreal and The Line Animation studio. The animations make up part of a larger campaign shared via social media, above the line and print.</p>

<p><img src="https://vimeo.com/263856289" alt="" /></p>

<h2 id="finneas-demos-how-he-builds-songs-for-billie-eilish">FINNEAS Demos How He Builds Songs For Billie Eilish</h2>
<p>Grammy Award-winning musician and producer FINNEAS sits down with Pitchfork and closely examines his creative process while working on some of the biggest hit songs of the past couple years. FINNEAS explores the sounds that brought upon 
some of his greatest musical breakthroughs in songs such as bad guy, bury a friend, ocean eyes, when the party’s over, I Lost a Friend, Used to This and much more.</p>

<p><img src="https://dai.ly/x7tgcev" alt="" /></p>

<h2 id="2019-bmw-vision-m-next-concept-hd">2019 BMW Vision M NEXT Concept (HD)</h2>

<p>In future, drivers will be able to choose whether they wish to be driven or do the driving themselves. With the BMW Vision M NEXT, the BMW Group is revealing its take on how driving pleasure might look in future. It offers a foretaste of the BMW M brand’s electrified future by placing the focus squarely on the actively engaged driver. Intelligent technologies provide comprehensive yet carefully targeted assistance to turn them into the ultimate driver.</p>

<p><img src="https://www.dailymotion.com/video/x7bur2y" alt="" /></p>

<h2 id="this-is-the-poster-image">This is the poster image</h2>
<p>In modern browsers, adding a video to your page is as easy as adding an image. No longer do you need to deal with special plug-ins or require crazy markup, you can do it with a single element.
<img src="//www.html5rocks.com/en/tutorials/video/basics/devstories.webm" alt="video" /></p>]]></content><author><name>maohuiling</name></author><category term="example" /><category term="video" /><summary type="html"><![CDATA[Canon in D (Pachelbel’s Canon) - Cello &amp; Piano [BEST WEDDING VERSION] Some of you know that we occasionally play for weddings. As you can imagine, we get a LOT of requests for Canon in D, and we discovered that there were no good arrangements available anywhere for piano and cello! Hard to believe given its popularity. So we decided to make our own! We tried to stick as closely to the original as possible (which was written for three violins and basso continuo), and we performed it not at a snail’s pace so the bride can actually make it down the aisle without putting everyone to sleep. 🙊(Yeah, we said it! Nobody likes a slow processional!) Also, the number one complaint about this piece from cellists is always how booooring it is to play because they literally have to play the same 8 bass notes over and over for the entire piece. Problem solved with this arrangement because the cello never has to play the bass! 🙌(The piano does, but we get lots of other fun stuff too so it’s ok!) So for all you musicians out there playing weddings, we hope you enjoy playing this arrangement a little more than the ones you were used to…You can get it from www.musicnotes.com. 😊Be sure to let us know in the comments if you do!]]></summary></entry><entry><title type="html">Table example</title><link href="/jekyll-theme-yat/example/2017/12/15/table-example.html" rel="alternate" type="text/html" title="Table example" /><published>2017-12-15T00:00:00+00:00</published><updated>2017-12-15T00:00:00+00:00</updated><id>/jekyll-theme-yat/example/2017/12/15/table-example</id><content type="html" xml:base="/jekyll-theme-yat/example/2017/12/15/table-example.html"><![CDATA[<h2 id="table-example-as-below">Table example as below</h2>

<p><strong>For now, these extended features are provided:</strong></p>

<ul>
  <li>Cells spanning multiple columns</li>
  <li>Cells spanning multiple rows</li>
  <li>Cells text align separately</li>
  <li>Table header not required</li>
  <li>Grouped table header rows or data rows</li>
</ul>

<h3 id="rowspan-and-colspan">Rowspan and Colspan</h3>
<p>^^ in a cell indicates it should be merged with the cell above.<br />
This feature is contributed by <a href="https://github.com/pmccloghrylaing">pmccloghrylaing</a>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">Stage</th>
      <th style="text-align: right">Direct Products</th>
      <th style="text-align: right">ATP Yields</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">Glycolysis</td>
      <td style="text-align: right">2 ATP                   |</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: right">^^</td>
      <td style="text-align: right">2 NADH</td>
      <td style="text-align: right">3–5 ATP</td>
    </tr>
    <tr>
      <td style="text-align: right">Pyruvaye oxidation</td>
      <td style="text-align: right">2 NADH</td>
      <td style="text-align: right">5 ATP</td>
    </tr>
    <tr>
      <td style="text-align: right">Citric acid cycle</td>
      <td style="text-align: right">2 ATP           |</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: right">^^</td>
      <td style="text-align: right">6 NADH</td>
      <td style="text-align: right">15 ATP</td>
    </tr>
    <tr>
      <td style="text-align: right">^^</td>
      <td style="text-align: right">2 FADH</td>
      <td style="text-align: right">3 ATP</td>
    </tr>
    <tr>
      <td style="text-align: right">30–32 ATP                         ||</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right"> </td>
    </tr>
  </tbody>
</table>

<p>[ Net ATP yields per hexose]</p>

<h3 id="multiline">Multiline</h3>
<p>A backslash at end to join cell contents with the following lines.<br />
This feature is contributed by <a href="https://github.com/Lucas-C">Lucas-C</a>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">:     Easy Multiline     :||</th>
      <th style="text-align: left"> </th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange  \</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange  \</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange  \</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
  </tbody>
</table>

<h3 id="headerless">Headerless</h3>
<p>Table header can be eliminated.</p>

<table>
  <tbody>
    <tr>
      <td>♜</td>
      <td> </td>
      <td>♝</td>
      <td>♛</td>
      <td>♚</td>
      <td>♝</td>
      <td>♞</td>
      <td>♜</td>
    </tr>
    <tr>
      <td> </td>
      <td>♟</td>
      <td>♟</td>
      <td>♟</td>
      <td> </td>
      <td>♟</td>
      <td>♟</td>
      <td>♟</td>
    </tr>
    <tr>
      <td>♟</td>
      <td> </td>
      <td>♞</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td>♗</td>
      <td> </td>
      <td> </td>
      <td>♟</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td>♙</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td>♘</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>♙</td>
      <td>♙</td>
      <td>♙</td>
      <td>♙</td>
      <td> </td>
      <td>♙</td>
      <td>♙</td>
      <td>♙</td>
    </tr>
    <tr>
      <td>♖</td>
      <td>♘</td>
      <td>♗</td>
      <td>♕</td>
      <td>♔</td>
      <td> </td>
      <td> </td>
      <td>♖</td>
    </tr>
  </tbody>
</table>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|:     Fruits <span class="se">\|\|</span> Food           :|||
|:-------- |:-------- |:------------ |
| Apple    |: Apple  :|    Apple     <span class="err">\</span>
| Banana   |  Banana  |    Banana    <span class="err">\</span>
| Orange   |  Orange  |    Orange    |
|:   Rowspan is 5   :||:  How's it? :|
|^^   A. Peach       ||^^ 1. Fine    |
|^^   B. Orange      ||^^ 2. Bad  $I = <span class="se">\i</span>nt <span class="se">\r</span>ho R^{2} dV$     |
|^^   C. Banana      ||   It's OK! !<span class="p">[</span><span class="nv">example image</span><span class="p">][</span><span class="ss">my-image</span><span class="p">]</span>  |
</code></pre></div></div>

<h3 id="text-alignment">Text Alignment</h3>
<p>Table cell can be set alignment separately.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">\:Fruits         |</th>
      <th style="text-align: left">Food   :</th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">Fruits\::        |</th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">: \:Fruits       :|</th>
      <th style="text-align: left"> </th>
      <th style="text-align: left">:       Food     :|</th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Orange</td>
      <td style="text-align: left">:   Strawberry    :</td>
    </tr>
    <tr>
      <td style="text-align: left">Apple  &amp;  Banana |</td>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">Peach        :|</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>: \:Fruits       :|</td>
      <td> </td>
      <td>:       Food     :|</td>
      <td> </td>
    </tr>
    <tr>
      <td>Apple</td>
      <td>Banana</td>
      <td>Orange</td>
      <td>:   Strawberry    :</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">:     Fruits || Food           :||</th>
      <th style="text-align: left"> </th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apple</td>
      <td style="text-align: left">: Apple  :</td>
      <td style="text-align: left">Apple     \</td>
    </tr>
    <tr>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Banana</td>
      <td style="text-align: left">Banana    \</td>
    </tr>
    <tr>
      <td style="text-align: left">Orange</td>
      <td style="text-align: left">Orange</td>
      <td style="text-align: left">Orange</td>
    </tr>
    <tr>
      <td style="text-align: left">:   Rowspan is 5   :|</td>
      <td style="text-align: left">:  How’s it? :</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">^^   A. Peach       |</td>
      <td style="text-align: left">^^ 1. Fine</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">^^   B. Orange      |</td>
      <td style="text-align: left">^^ 2. Bad  $I = \int \rho R^{2} dV$</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">^^   C. Banana      |</td>
      <td style="text-align: left">It’s OK! ![example image](http://www.unexpected-vortices.com/sw/rippledoc/example-image.jpg "An exemplary image")</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
</table>]]></content><author><name>maohuiling</name></author><category term="example" /><category term="table" /><summary type="html"><![CDATA[Table example as below]]></summary></entry><entry><title type="html">Mermaid example</title><link href="/jekyll-theme-yat/example/2017/12/08/mermaid-example.html" rel="alternate" type="text/html" title="Mermaid example" /><published>2017-12-08T00:00:00+00:00</published><updated>2017-12-08T00:00:00+00:00</updated><id>/jekyll-theme-yat/example/2017/12/08/mermaid-example</id><content type="html" xml:base="/jekyll-theme-yat/example/2017/12/08/mermaid-example.html"><![CDATA[<h3 id="1-pie-chart">1. Pie chart</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoicGllIHRpdGxlIFBldHMgYWRvcHRlZCBieSB2b2x1bnRlZXJzXG5cIkRvZ3NcIiA6IDM4NlxuXCJDYXRzXCIgOiA4NVxuXCJSYXRzXCIgOiAzNSIsIm1lcm1haWQiOm51bGx9" /></p>

<h3 id="2-sequence-diagram">2. sequence diagram</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5BbGljZSAtPj4gQm9iOiBIZWxsbyBCb2IsIGhvdyBhcmUgeW91P1xuQm9iLS0-PkpvaG46IEhvdyBhYm91dCB5b3UgSm9obj9cbkJvYi0teCBBbGljZTogSSBhbSBnb29kIHRoYW5rcyFcbkJvYi14IEpvaG46IEkgYW0gZ29vZCB0aGFua3MhXG5Ob3RlIHJpZ2h0IG9mIEpvaG46IEJvYiB0aGlua3MgYSBsb25nPGJyLz5sb25nIHRpbWUsIHNvIGxvbmc8YnIvPnRoYXQgdGhlIHRleHQgZG9lczxici8-bm90IGZpdCBvbiBhIHJvdy5cbiUlLVxuQm9iLS0-QWxpY2U6IENoZWNraW5nIHdpdGggSm9obi4uLlxuQWxpY2UtPkpvaG46IFllcy4uLiBKb2huLCBob3cgYXJlIHlvdT8iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZ3JhcGggVERcbkFbQ2hyaXN0bWFzXSAtLT58R2V0IG1vbmV5fCBCKEdvIHNob3BwaW5nKVxuQiAtLT4gQ3tMZXQgbWUgdGhpbmt9XG5DIC0tPnxPbmV8IERbTGFwdG9wXVxuQyAtLT58VHdvfCBFW2lQaG9uZV1cbkMgLS0-fFRocmVlfCBGW2ZhOmZhLWNhciBDYXJdIiwibWVybWFpZCI6bnVsbH0" /></p>

<h3 id="3-class-diagram">3. Class diagram</h3>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5BbmltYWwgPHwtLSBEdWNrXG5BbmltYWwgPHwtLSBGaXNoXG5BbmltYWwgPHwtLSBaZWJyYVxuQW5pbWFsIDogK2ludCBhZ2VcbkFuaW1hbCA6ICtTdHJpbmcgZ2VuZGVyXG5BbmltYWw6ICtpc01hbW1hbCgpXG5BbmltYWw6ICttYXRlKClcbmNsYXNzIER1Y2t7XG4rU3RyaW5nIGJlYWtDb2xvclxuK3N3aW0oKVxuK3F1YWNrKClcbn1cbmNsYXNzIEZpc2h7XG4taW50IHNpemVJbkZlZXRcbi1jYW5FYXQoKVxufVxuY2xhc3MgWmVicmF7XG4rYm9vbCBpc193aWxkXG4rcnVuKClcbn0iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<h3 id="4-state-diagram">4. State diagram</h3>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic3RhdGVEaWFncmFtXG5bKl0gLS0-IFN0aWxsXG5TdGlsbCAtLT4gWypdXG4lJS1cblN0aWxsIC0tPiBNb3Zpbmdcbk1vdmluZyAtLT4gU3RpbGxcbk1vdmluZyAtLT4gQ3Jhc2hcbkNyYXNoIC0tPiBbKl0iLCJtZXJtYWlkIjpudWxsfQ" /></p>]]></content><author><name>maohuiling</name></author><category term="example" /><category term="mermaid" /><summary type="html"><![CDATA[1. Pie chart]]></summary></entry><entry><title type="html">Plantuml example</title><link href="/jekyll-theme-yat/example/2017/12/04/plantuml-example.html" rel="alternate" type="text/html" title="Plantuml example" /><published>2017-12-04T00:00:00+00:00</published><updated>2017-12-04T00:00:00+00:00</updated><id>/jekyll-theme-yat/example/2017/12/04/plantuml-example</id><content type="html" xml:base="/jekyll-theme-yat/example/2017/12/04/plantuml-example.html"><![CDATA[<h2 id="my-first-plantuml">My First PlantUML</h2>

<h3 id="plantuml-block-1">PlantUML Block-1</h3>
<p><img class="plantuml" src="http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a426f62202d3e20416c696365203a2068656c6c6f0a40656e64756d6c" /></p>

<h3 id="plantuml-block-2">PlantUML Block-2</h3>
<p><img class="plantuml" src="http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a426f62202d3e20416c696365203a2068656c6c6f20776f726c640a40656e64756d6c" /></p>

<h3 id="plantuml-block-3">PlantUML Block-3</h3>
<p><img class="plantuml" src="http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a282a29202d2d3e2022496e697469616c697a6174696f6e220a0a69662022536f6d65205465737422207468656e0a20202d2d3e5b747275655d2022536f6d65204163746976697479220a20202d2d3e2022416e6f74686572206163746976697479220a20202d72696768742d3e20282a290a656c73650a20202d3e5b66616c73655d2022536f6d657468696e6720656c7365220a20202d2d3e5b456e64696e672070726f636573735d20282a290a656e6469660a40656e64756d6c" /></p>

<h3 id="plantuml-block-4">PlantUML Block-4</h3>

<p><img class="plantuml" src="http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a736b696e706172616d2068616e647772697474656e20747275650a0a736b696e706172616d2075736563617365207b0a20204261636b67726f756e64436f6c6f72204461726b536561477265656e0a2020426f72646572436f6c6f72204461726b536c617465477261790a0a20204261636b67726f756e64436f6c6f723c3c204d61696e203e3e2059656c6c6f77477265656e0a2020426f72646572436f6c6f723c3c204d61696e203e3e2059656c6c6f77477265656e0a0a20204172726f77436f6c6f72204f6c6976650a20204163746f72426f72646572436f6c6f7220626c61636b0a20204163746f72466f6e744e616d6520436f75726965720a0a20204163746f724261636b67726f756e64436f6c6f723c3c2048756d616e203e3e20476f6c640a7d0a0a55736572203c3c2048756d616e203e3e0a3a4d61696e2044617461626173653a206173204d7953716c203c3c204170706c69636174696f6e203e3e0a28537461727429203c3c204f6e652053686f74203e3e0a2855736520746865206170706c69636174696f6e29206173202855736529203c3c204d61696e203e3e0a0a55736572202d3e20285374617274290a55736572202d2d3e2028557365290a0a4d7953716c202d2d3e2028557365290a0a40656e64756d6c" /></p>]]></content><author><name>maohuiling</name></author><category term="example" /><category term="plantuml" /><summary type="html"><![CDATA[My First PlantUML]]></summary></entry><entry><title type="html">Quick markdown example</title><link href="/jekyll-theme-yat/markdown/2017/06/10/quick-mardown-example.html" rel="alternate" type="text/html" title="Quick markdown example" /><published>2017-06-10T00:00:00+00:00</published><updated>2017-06-10T00:00:00+00:00</updated><id>/jekyll-theme-yat/markdown/2017/06/10/quick-mardown-example</id><content type="html" xml:base="/jekyll-theme-yat/markdown/2017/06/10/quick-mardown-example.html"><![CDATA[<p><img src="https://github.com/jeffreytse/jekyll-theme-yat/assets/9413601/2ed22d49-90b1-4f7e-8e8f-b77b21dee505" alt="banner" /></p>

<p>Paragraphs are separated by a blank line.</p>

<p>2nd paragraph. <em>Italic</em>, <strong>bold</strong>, and <code class="language-plaintext highlighter-rouge">monospace</code>. Itemized lists
look like:</p>

<ul>
  <li>this one</li>
  <li>that one</li>
  <li>the other one</li>
</ul>

<p>Note that — not considering the asterisk — the actual text
content starts at 4-columns in.</p>

<blockquote>
  <p>Block quotes are
written like so.</p>

  <p>They can span multiple paragraphs,
if you like.</p>
</blockquote>

<p>Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all
in chapters 12–14”). Three dots … will be converted to an ellipsis.
Unicode is supported. ☺</p>

<h2 id="an-h2-header">An h2 header</h2>

<p>Here’s a numbered list:</p>

<ol>
  <li>first item</li>
  <li>second item</li>
  <li>third item</li>
</ol>

<p>Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here’s a code sample:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Let me re-iterate ...
for i in 1 .. 10 { do-something(i) }
</code></pre></div></div>

<p>As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>define foobar() {
    print "Welcome to flavor country!";
}
</code></pre></div></div>

<p>(which makes copying &amp; pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="c1"># Quick, count to ten!
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="c1"># (but not *too* quick)
</span>    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="an-h3-header">An h3 header</h3>

<p>Now a nested list:</p>

<ol>
  <li>
    <p>First, get these ingredients:</p>

    <ul>
      <li>carrots</li>
      <li>celery</li>
      <li>lentils</li>
    </ul>
  </li>
  <li>
    <p>Boil some water.</p>
  </li>
  <li>
    <p>Dump everything in the pot and follow
this algorithm:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find wooden spoon
uncover pot
stir
cover pot
balance wooden spoon precariously on pot handle
wait 10 minutes
goto first step (or shut off burner when done)
</code></pre></div>    </div>

    <p>Do not bump wooden spoon or it will fall.</p>
  </li>
</ol>

<p>Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).</p>

<p>Here’s a link to <a href="http://foo.bar">a website</a>, to a <a href="local-doc.html">local
doc</a>, and to a <a href="#an-h2-header">section heading in the current
doc</a>. Here’s a footnote <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p>

<p>Tables can look like this:</p>

<p>Name           Size  Material      Color
————- —–  ————  ————
All Business      9  leather       brown
Roundabout       10  hemp canvas   natural
Cinderella       11  glass         transparent</p>

<p>Table: Shoes sizes, materials, and colors.</p>

<p>(The above is the caption for the table.) Pandoc also supports
multi-line tables:</p>

<hr />
<p>Keyword   Text
——–  ———————–
red       Sunsets, apples, and
          other red or reddish
          things.</p>

<p>green     Leaves, grass, frogs
          and other things it’s
          not easy being.
——–  ———————–</p>

<p>A horizontal rule follows.</p>

<hr />

<p>Here’s a definition list:</p>

<dl>
  <dt>apples</dt>
  <dd>Good for making applesauce.</dd>
  <dt>oranges</dt>
  <dd>Citrus!</dd>
  <dt>tomatoes</dt>
  <dd>There’s no “e” in tomatoe.</dd>
</dl>

<p>Again, text is indented 4 spaces. (Put a blank line between each
term and  its definition to spread things out more.)</p>

<p>Here’s a “line block” (note how whitespace is honored):</p>

<table>
  <tbody>
    <tr>
      <td>Line one</td>
    </tr>
    <tr>
      <td>Line too</td>
    </tr>
    <tr>
      <td>Line tree</td>
    </tr>
  </tbody>
</table>

<p>and images can be specified like so:</p>

<p><img src="https://user-images.githubusercontent.com/9413601/123900693-1d9ebd00-d99c-11eb-8e9e-cf7879187606.png" alt="example image" title="An exemplary image" /></p>

<p>Inline math equation: $\omega = d\phi / dt$. Display
math should get its own line like so:</p>

<p>$$I = \int \rho R^{2} dV$$</p>

<p>And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Some footnote text. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>maohuiling</name></author><category term="markdown" /><category term="example" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">This post demonstrates post content styles</title><link href="/jekyll-theme-yat/junk/2017/05/20/this-post-demonstrates-post-content-styles.html" rel="alternate" type="text/html" title="This post demonstrates post content styles" /><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><id>/jekyll-theme-yat/junk/2017/05/20/this-post-demonstrates-post-content-styles</id><content type="html" xml:base="/jekyll-theme-yat/junk/2017/05/20/this-post-demonstrates-post-content-styles.html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h2 id="some-great-heading-h2">Some great heading (h2)</h2>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu.</p>

<p>Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<h2 id="another-great-heading-h2">Another great heading (h2)</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h3 id="some-great-subheading-h3">Some great subheading (h3)</h3>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum.</p>

<p>Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.</p>

<h3 id="some-great-subheading-h3-1">Some great subheading (h3)</h3>

<p>Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<blockquote>
  <p>This quote will change your life. It will reveal the secrets of the universe, and all the wonders of humanity. Don’t misuse it.</p>
</blockquote>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</p>

<h3 id="some-great-subheading-h3-2">Some great subheading (h3)</h3>

<p>Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span> <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.</p>

<h4 id="you-might-want-a-sub-subheading-h4">You might want a sub-subheading (h4)</h4>

<p>In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.</p>

<p>In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.</p>

<h4 id="but-its-probably-overkill-h4">But it’s probably overkill (h4)</h4>

<p>In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.</p>

<h3 id="oh-hai-an-unordered-list">Oh hai, an unordered list!!</h3>

<p>In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.</p>

<ul>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
</ul>

<h3 id="oh-hai-an-ordered-list">Oh hai, an ordered list!!</h3>

<p>In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.</p>

<ol>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
</ol>

<h2 id="headings-are-cool-h2">Headings are cool! (h2)</h2>

<p>Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<p>Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<p>Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.</p>

<h3 id="tables">Tables</h3>

<table>
  <thead>
    <tr>
      <th>Title 1</th>
      <th>Title 2</th>
      <th>Title 3</th>
      <th>Title 4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>lorem</td>
      <td>lorem ipsum</td>
      <td>lorem ipsum dolor</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Title 1</th>
      <th>Title 2</th>
      <th>Title 3</th>
      <th>Title 4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>lorem</td>
      <td>lorem ipsum</td>
      <td>lorem ipsum dolor</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit amet</td>
      <td>lorem ipsum dolor sit amet consectetur</td>
      <td>lorem ipsum dolor sit amet</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor</td>
      <td>lorem ipsum</td>
      <td>lorem</td>
      <td>lorem ipsum</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit amet</td>
      <td>lorem ipsum dolor sit amet consectetur</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Bart Simpson</name></author><category term="junk" /><summary type="html"><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.]]></summary></entry><entry><title type="html">My Example Post</title><link href="/jekyll-theme-yat/junk/2016/08/12/my-example-post.html" rel="alternate" type="text/html" title="My Example Post" /><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><id>/jekyll-theme-yat/junk/2016/08/12/my-example-post</id><content type="html" xml:base="/jekyll-theme-yat/junk/2016/08/12/my-example-post.html"><![CDATA[<p>Eos eu docendi tractatos sapientem, brute option menandri in vix, quando vivendo accommodare te ius. Nec melius fastidii constituam id, viderer theophrastus ad sit, hinc semper periculis cum id. Noluisse postulant assentior est in, no choro sadipscing repudiandae vix. Vis in euismod delenit dignissim. Ex quod nostrum sit, suas decore animal id ius, nobis solet detracto quo te.</p>

<p>No laudem altera adolescens has, volumus lucilius eum no. Eam ei nulla audiam efficiantur. Suas affert per no, ei tale nibh sea. Sea ne magna harum, in denique scriptorem sea, cetero alienum tibique ei eos. Labores persequeris referrentur eos ei.</p>]]></content><author><name>maohuiling</name></author><category term="junk" /><summary type="html"><![CDATA[Eos eu docendi tractatos sapientem, brute option menandri in vix, quando vivendo accommodare te ius. Nec melius fastidii constituam id, viderer theophrastus ad sit, hinc semper periculis cum id. Noluisse postulant assentior est in, no choro sadipscing repudiandae vix. Vis in euismod delenit dignissim. Ex quod nostrum sit, suas decore animal id ius, nobis solet detracto quo te.]]></summary></entry></feed>